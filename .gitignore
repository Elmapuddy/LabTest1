#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#define size 500

void get_input(float *a);
void ascendingSort (float *a, int nElement);
void merge(float *a, int m, float *b, int n, float *sorted);
float value, t;
int counter = 0, a, b;
float first[size], second[size], *merged;
int main(void)
{
	get_input(first);
	a = counter;
	counter = 0;
	get_input(second);
	b = counter;
	
	merged = malloc ((a + b) * sizeof(float a));

	ascendingSort (first, a);
	ascendingSort (second, b);
	merge (first, a, second, b, merged);
	printf("Sorted vector:\n");
	for (int i = 0; i < a; ++i)
	{
		printf("%d\t%.2f\n", i + 1, first[i]);
	}
	printf("Sorted vector:\n");
	for (int i = 0; i < b; ++i)
	{
		printf("%d\t%.2f\n", i + 1, second[i]);
	}
	printf("Merged vector\n");
	for (int i = 0; i < (a+b); ++i)
	{
		printf("%d\t%.2f\n", i + 1, merged[i]);
	}
	
	return 0;
}

void get_input(float *a)
{
	char string[size];	
	char *tokenptr, *stringptr;
	printf("Enter the vectors:\n");
	gets(string);
	tokenptr = strtok (string, " ");
	stringptr = string;
	while (tokenptr != NULL)
	{
		char *end;
		while(1)
		{
			value = strtof(tokenptr, &end);
			if (end == stringptr)
			{
				break;
			}
			//printf("%f\n", value);
			a[counter] = value;
			stringptr = end;
			counter++;
		}
		tokenptr = strtok (NULL, " ");
	}
}

//the function takes two arguments '*a' is the array and "nElement" is the total elements in that array
//It returns the memory address of the array 
void ascendingSort (float *a, int nElement)
{
	for (int i = 0; i < nElement; ++i)  
	{
		for (int j = i + 1; j < nElement ; ++j)  //go through the loop "nElemnt" times. 
		{
			if (a[i] > a[j])  //if element 'i' was greater than element 'j = 'i + 1''
			{
				t = a[i];       // t equales to the 'i' elemnt. (so we don't loose any data)  												   a[i] ==> t
				a[i] = a[j];    // move 'j' elemnt one index up 							  												   a[j] ==> a[i]
				a[j] = t;		// repace 'j' elemt with t. (we don't need to save the 'j' element as it has been copied to the index before)  t ==> a[j]
			}
		}
	}

}
//The function will take five arguments. 
/*
|argument |										  |	
|---------|---------------------------------------|
|*a       | First array                           |
|m        | Number of elements within first array |
|*b       | Second array                          |
|n        | Number of elements within second array|
|*sorted  | The merged array (results)            |
*/
void merge(float *a, int m, float *b, int n, float *sorted)
{
  //counters for loops and indexes 
  int i, j = 0, k = 0;
	for (i = 0; i < m + n;) 
	{
		if (j < m && k < n) 
		{
	  		if (a[j] < b[k]) 
	  		{
	    		sorted[i] = a[j];
	    		j++;
	  		}
	  		else 
	  		{
	    		sorted[i] = b[k];
	    		k++;
	  		}
	  		i++;
		}
		else if (j == m) 
		{
		  	for (; i < m + n;) 
		  	{
				sorted[i] = b[k];
				k++;
				i++;
		  	}
		}
		else 
		{
		  	for (; i < m + n;) 
		  	{
			    sorted[i] = a[j];
			    j++;
			    i++;
		  	}
		}
	}
}
